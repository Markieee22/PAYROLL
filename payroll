package payroll_system;
import java.util.*;




public class Payroll_System {
    public static Scanner input = new Scanner(System.in);
    public static ArrayList<String> employeeName = new ArrayList<>();
    public static ArrayList<Integer> employeeID = new ArrayList<>();
    public static ArrayList<Double> grossPay = new ArrayList<>();
    public static ArrayList<Double> sssDeduction = new ArrayList<>();
    public static ArrayList<Double> pagibigDeduction = new ArrayList<>();
    public static ArrayList<Double> philhealthDeduction = new ArrayList<>();
    public static ArrayList<Integer> position = new ArrayList<>();
    public static ArrayList<Integer> workingDays = new ArrayList<>();
    public static int count = 0;

    public static int Menuslct;
    public static boolean status = true;

    public static void main(String[] args) {
        System.out.println("-------Welcome to Payroll System-------");
        mainFunction();
    }

    
    
    
    
    
    
    public static void mainFunction() {
        while (status) {
            try {
                
                System.out.println("|----------------------------------------------------------|");
                System.out.println("|                PLEASE SELECT THE FOLLOWING               |");
                System.out.println("|----------------------------------------------------------|");
                System.out.println("|1. lOGIN                                                  |");
                System.out.println("|2. EXIT                                                   |");
                System.out.println("|----------------------------------------------------------|");
                System.out.print("Enter here : ");
                if (!input.hasNextInt()) {
                    System.out.println("Invalid input. Please Enter a number");
                    input.next();
                    status = true;
                } else {
                    Menuslct = input.nextInt();
                }

                switch (Menuslct) {
                    case 1:
                        LoginFunct();
                        status = false;
                        break;

                    case 2:
                        Exitfunct();
                        status = false;
                        break;

                    default:
                        System.out.println("Invalid Input");
                        status = true;
                        break;
                }
            } catch (Exception ex) {
                System.out.println("An error occurred " + ex.getMessage());
                status = true;
                displayMenu();
            }
        }
    }

    
    
    
    
    public static void LoginFunct() {
        Scanner input = new Scanner(System.in);
        status = true;
        while (status) {
            System.out.println("------------------------------------------------------------");
            System.out.println("                     SYSTEM LOGIN                     ");
            System.out.println("------------------------------------------------------------");
            System.out.print("Enter Username : ");
            String username = input.next();
            System.out.print("Enter password : ");
            String password = input.next();
            if (username.equals("admin") && password.equals("password")) {
                System.out.println("\n--------------LOGIN SUCCESSFULLY-------------\n");
                displayMenu();
                status = false;
            } else {
                System.out.println("----------WRONG USER OR PASS, PLEASE LOGIN AGAIN----------");
                status = true;
            }
        }
    }
    
    
    
    
    

    public static void Exitfunct() {
        System.out.println("Exiting Payroll System!");
        System.exit(0);
    }
    
    
    
    
    
    
    

    public static void displayMenu() {
        while (true) {
            System.out.println("------------------------------------------------------------");
            System.out.println("                     PAYROLL SYSTEM MENU                     ");
            System.out.println("------------------------------------------------------------");
            System.out.println("1. Add Employee");
            System.out.println("2. Calculate Payroll");
            System.out.println("3. Search Employee");
            System.out.println("4. Delete Employee");
            System.out.println("5. Update Employee");
            System.out.println("6. Logout");

            System.out.print("Select Option: ");
            int option = input.nextInt();

            if (option == 1) {
                addEmployee();
                status = true;
                System.out.print("Do you want to add another employee? (Y/N): ");
                String addAnother = input.next().toLowerCase();
                if (!addAnother.equals("y")) {
                    displayMenu();displayMenu();
                }else{
                    addEmployee();
                }

            } else if (option == 2) {
                while (true) {
                    calculatePayroll();
                    System.out.print("Do you want to calculate payroll for another employee? (Y/N): ");
                    String calculateAnother = input.next().toLowerCase();
                    if (!calculateAnother.equals("y")) {
                        displayMenu();
                    }else{
                        calculatePayroll();
                    }
                    
                }
            } else if (option == 3) {
                searchEmployee();
                status = true;
                System.out.print("Do you want to search for another employee? (Y/N): ");
                String searchAnother = input.next().toLowerCase();
                if (!searchAnother.equals("y")) { 
                     displayMenu();
                }else{
                    searchEmployee();
                }
                
            } else if (option == 4) {
                deleteEmployee();
                status = true;
                System.out.print("Do you want to delete other employee? (Y/N): ");
                String deleteAnother = input.next().toLowerCase();
                if (!deleteAnother.equals("y")) { 
                     displayMenu();
                }else{
                    deleteEmployee();
                }
            } else if (option == 5) {
               updateEmployee();
                status = true;
                System.out.print("Do you want to Update other employee? (Y/N): ");
                String updateAnother = input.next().toLowerCase();
                if (!updateAnother.equals("y")) { 
                     displayMenu();
                }else{
                    updateEmployee();
                }

            } else if(option == 6){
                logOut();
                status = true;
             }else {
             System.out.println("Invalid Option"); status = true;
              }
            
        }
    }
    
    
    
    
    
    

    public static void calculatePayroll() {
        System.out.print("Enter Employee ID to calculate payroll: ");
        int empID = input.nextInt();
        int index = employeeID.indexOf(empID);

        if (index != -1) {
            System.out.println("------------------------------------------------------------");
            System.out.println("                     CALCULATE PAYROLL                      ");
            System.out.println("------------------------------------------------------------");
            double netSalary = grossPay.get(index) - sssDeduction.get(index) - pagibigDeduction.get(index) - philhealthDeduction.get(index);
            System.out.println(" |Employee ID: " + employeeID.get(index));
            System.out.println(" |Employee First Name: " + employeeName.get(index));
            System.out.println(" |Position: " + getPositionName(position.get(index))); // Added position display
            System.out.println(" |Working Days: " + workingDays.get(index)); // Added working days display
            System.out.println(" |SSS Deduction: " + sssDeduction.get(index));
            System.out.println(" |Pag-ibig Deduction: " + pagibigDeduction.get(index));
            System.out.println(" |PhilHealth Deduction: " + philhealthDeduction.get(index));
            System.out.println(" |Gross Pay: " + grossPay.get(index));
            System.out.println(" |Net Salary: " + netSalary);
            System.out.println("------------------------------------------------------------");
        } else {
            System.out.println("Employee not found with the provided ID.");
        }
    }

    
    
    
    
    
    public static String getPositionName(int positionCode) {
        switch (positionCode) {
            case 1:
                return "Cashier";
            case 2:
                return "Manager";
            case 3:
                return "Security Guard";
            default:
                return "Unknown Position";
        }
    }
    
    
    
    
    
    

    public static void searchEmployee() {
        Scanner input = new Scanner(System.in);
        System.out.print("Enter Employee Name to search: ");
        String searchName = input.next();

        boolean found = false;
        for (int i = 0; i < employeeName.size(); i++) {
            if (employeeName.get(i).equalsIgnoreCase(searchName)) {
                System.out.println("------------------------------------------------------------");
                System.out.println("                     EMPLOYEE DETAILS                      ");
                System.out.println("------------------------------------------------------------");
                System.out.println(" |Employee ID: " + employeeID.get(i));
                System.out.println(" |Employee Name: " + employeeName.get(i));
                System.out.println(" |Position: " + getPositionName(position.get(i))); // Added position display
                System.out.println(" |Working Days: " + workingDays.get(i)); // Added working days display
                System.out.println(" |SSS Deduction: " + sssDeduction.get(i));
                System.out.println(" |Pagibig Deduction: " + pagibigDeduction.get(i));
                System.out.println(" |Philhealth Deduction: "+philhealthDeduction.get(i));
                System.out.println(" |Gross Pay: " + grossPay.get(i));
                System.out.println("------------------------------------------------------------");
                found = true;
                break;
            }
        }

        if (!found) {
            System.out.println("Employee not found with the provided name.");
        }
    }

    public static void logOut() {
        System.out.println("----------LOGOUT SUCCESSFULLY----------");
        status = true;
        mainFunction();
    }
    
    
    
    

public static void addEmployee() {
    Scanner input = new Scanner(System.in);

    System.out.print("Enter Employee ID: ");
    int empID = input.nextInt();
    if (employeeID.contains(empID)) {
        System.out.println("Employee ID already exists. Please enter a unique ID.");
        return;
    }

    System.out.print("Enter First Name: ");
    String empName = input.next();

    
    
    
    

                System.out.println("|----------------------------------------------------------|");
                System.out.println("|                       SELECT POSITION                    |");
                System.out.println("|----------------------------------------------------------|");
                System.out.println("|1. CASHIER                                                |");
                System.out.println("|2. MANAGER                                                | ");
                System.out.println("|3. SECURITY GUARD                                         |");
                System.out.println("|----------------------------------------------------------|");
                System.out.print("Enter here : ");
    int empPosition = input.nextInt();

    System.out.print("Enter the number of working days (1 for 15 days, 2 for 30 days): ");
    int daysWorked = input.nextInt();

    double sss, pagibig, philhealthRate;

    // Prompt for deductions (SSS, Pag-ibig, Philhealth)
    System.out.print("Enter SS Deduction: ");
    sss = input.nextDouble();

    System.out.print("Enter Pag-ibig Deduction: ");
    pagibig = input.nextDouble();
    
    
    
    


                System.out.println("|----------------------------------------------------------|");
                System.out.println("|                 ENTER PHILHEALTH CATEGORY                |");
                System.out.println("|----------------------------------------------------------|");
                System.out.println("|1. FORMAL ECONOMY SECTOR                                  |");
                System.out.println("|2. INFORMAL ECONOMY SECTOR                                |");
                System.out.println("|3. OTHER MEMBERSHIPS                                      |");
                System.out.println("|----------------------------------------------------------|");
                System.out.print("Enter here : ");
    int philHealthCategoryChoice = input.nextInt();

    switch (philHealthCategoryChoice) {
        case 1:
            philhealthRate = 200.0; // Formal Economy Sector
            break;
        case 2:
            philhealthRate = 150.0; // Informal Economy Sector
            break;
        case 3:
            philhealthRate = 100.0; // Other Memberships
            break;
        default:
            philhealthRate = 0.0;
            break;
            
            
            
            
            
            
            
    }


    double gross = calculateGrossPay(empPosition, daysWorked == 1 ? 15 : 30);
    employeeID.add(empID);
    employeeName.add(empName);
    position.add(empPosition);
    workingDays.add(daysWorked == 1 ? 15 : 30);
    sssDeduction.add(sss);
    pagibigDeduction.add(pagibig);
    philhealthDeduction.add(philhealthRate);
    grossPay.add(gross);

    System.out.println("\n----------Employee added successfully!----------\n");
    
    
    
    
    
}
public static void updateEmployee() {
    Scanner input = new Scanner(System.in);

    System.out.print("Enter Employee ID to update: ");
    int empIDToUpdate = input.nextInt();
    int index = employeeID.indexOf(empIDToUpdate);

    if (index != -1) {
        System.out.println("Enter New Employee Information:");

        System.out.print("New Employee Name: ");
        String newName = input.next();
        employeeName.set(index, newName);

        System.out.println("|----------------------------------------------------------|");
        System.out.println("|                       SELECT NEW POSITION                 |");
        System.out.println("|----------------------------------------------------------|");
        System.out.println("|1. CASHIER                                                |");
        System.out.println("|2. MANAGER                                                |");
        System.out.println("|3. SECURITY GUARD                                         |");
        System.out.println("|----------------------------------------------------------|");
        System.out.print("Enter New Position: ");
        int newPosition = input.nextInt();
        position.set(index, newPosition);

        System.out.print("Enter New SSS Deduction: ");
        double newSss = input.nextDouble();
        sssDeduction.set(index, newSss);

        System.out.print("Enter New Pag-ibig Deduction: ");
        double newPagibig = input.nextDouble();
        pagibigDeduction.set(index, newPagibig);

        System.out.println("|----------------------------------------------------------|");
        System.out.println("|1. FORMAL ECONOMY SECTOR                                  |");
        System.out.println("|2. INFORMAL ECONOMY SECTOR                                |");
        System.out.println("|3. OTHER MEMBERSHIPS                                      |");
        System.out.println("|----------------------------------------------------------|");
        System.out.print("Enter New Philhealth Category: ");
        int newPhilHealthCategoryChoice = input.nextInt();

        double newPhilhealthRate;
        switch (newPhilHealthCategoryChoice) {
            case 1:
                newPhilhealthRate = 200.0; // Formal Economy Sector
                break;
            case 2:
                newPhilhealthRate = 150.0; // Informal Economy Sector
                break;
            case 3:
                newPhilhealthRate = 100.0; // Other Memberships
                break;
            default:
                newPhilhealthRate = 0.0;
                break;
        }
        philhealthDeduction.set(index, newPhilhealthRate);

        System.out.println("\n----------Employee information updated successfully!----------\n");
    } else {
        System.out.println("\nEmployee not found with the provided ID.\n");
    }
}

    public static double calculateGrossPay(int empPosition, int daysWorked) {
        double dailyRate;
        switch (empPosition) {
            case 1: // Cashier
                dailyRate = 365.0;
                break;
            case 2: // Manager
                dailyRate = 2000.0;
                break;
            case 3: // Security Guard
                dailyRate = 265.0;
                break;
            default:
                dailyRate = 0.0;
        }

        if (daysWorked == 15) {
            return dailyRate * 15;
        } else if (daysWorked == 30) {
            return dailyRate * 30;
        } else {
            return 0.0;
        }
    }

    public static void deleteEmployee() {
        Scanner input = new Scanner(System.in);

        System.out.print("Enter Employee ID to delete: ");
        int empIDToDelete = input.nextInt();
        int index = employeeID.indexOf(empIDToDelete);

        if (index != -1) {
            System.out.println("|------------------------------------------------------------|");
            System.out.println("|                     DELETE EMPLOYEE                        |");
            System.out.println("|------------------------------------------------------------|");
            System.out.println("  |EMPLOYEE ID: " + employeeID.get(index)                  );
            System.out.println("  |EMPLOYEE NAME: " + employeeName.get(index)                );
            System.out.println("  |POSITION: " + getPositionName(position.get(index)));
            System.out.println("  |WORKING DAYS: " + workingDays.get(index)                );
            System.out.println("  |SSS DEDUCTION: " + sssDeduction.get(index));
            System.out.println("  |PAG-IBIG DEDUCTION: " + pagibigDeduction.get(index));
            System.out.println("  |PHILHEALTH DEDUCTION: " + philhealthDeduction.get(index));
            System.out.println("  |GROSS PAY: " + grossPay.get(index)           
            
            
            
            );

            System.out.print("Are you sure you want to delete this employee? (Y/N): ");
            String confirmation = input.next().toLowerCase();
            System.out.println("-------------------------------------------------------------");
            if (confirmation.equals("y")) {
                employeeID.remove(index);
                employeeName.remove(index);
                position.remove(index);
                workingDays.remove(index);
                sssDeduction.remove(index);
                pagibigDeduction.remove(index);
                philhealthDeduction.remove(index);
                grossPay.remove(index);

                System.out.println("\nEMPLOYEE SUCCESSFULLY DELETED\n");
            } else {
                System.out.println("\nEMPLOYEE NOT DELETED\n");
            }
        } else {
            System.out.println("\nEmployee not found with the provided ID.\n");
        }
    }
    
    
}
